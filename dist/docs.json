{
  "api": {
    "name": "SecureStoragePlugin",
    "slug": "securestorageplugin",
    "docs": "The SecureStoragePlugin plugin interface",
    "tags": [],
    "methods": [
      {
        "name": "get",
        "signature": "(options: { key: string; }) => Promise<{ value: string; }>",
        "parameters": [
          {
            "name": "options",
            "docs": "key to get value for",
            "type": "{ key: string; }"
          }
        ],
        "returns": "Promise<{ value: string; }>",
        "tags": [
          {
            "name": "param",
            "text": "options key to get value for"
          },
          {
            "name": "returns",
            "text": "value for the given key"
          }
        ],
        "docs": "gets the value for the given key",
        "complexTypes": [],
        "slug": "get"
      },
      {
        "name": "getAccessibility",
        "signature": "(options: { key: string; }) => Promise<{ value: string | undefined; }>",
        "parameters": [
          {
            "name": "options",
            "docs": "key to get accessibility for",
            "type": "{ key: string; }"
          }
        ],
        "returns": "Promise<{ value: string | undefined; }>",
        "tags": [
          {
            "name": "param",
            "text": "options key to get accessibility for"
          },
          {
            "name": "returns",
            "text": "accessibility for the given key"
          }
        ],
        "docs": "gets the accessibility for the given key",
        "complexTypes": [],
        "slug": "getaccessibility"
      },
      {
        "name": "set",
        "signature": "(options: SetDataOptions) => Promise<{ value: boolean; }>",
        "parameters": [
          {
            "name": "options",
            "docs": "key and value to set",
            "type": "SetDataOptions"
          }
        ],
        "returns": "Promise<{ value: boolean; }>",
        "tags": [
          {
            "name": "param",
            "text": "options key and value to set"
          },
          {
            "name": "returns",
            "text": "true if the value was set successfully"
          }
        ],
        "docs": "sets the value for the given key",
        "complexTypes": [
          "SetDataOptions"
        ],
        "slug": "set"
      },
      {
        "name": "remove",
        "signature": "(options: { key: string; }) => Promise<{ value: boolean; }>",
        "parameters": [
          {
            "name": "options",
            "docs": "key to remove value for",
            "type": "{ key: string; }"
          }
        ],
        "returns": "Promise<{ value: boolean; }>",
        "tags": [
          {
            "name": "param",
            "text": "options key to remove value for"
          },
          {
            "name": "returns",
            "text": "true if the value was removed successfully"
          }
        ],
        "docs": "removes the value for the given key",
        "complexTypes": [],
        "slug": "remove"
      },
      {
        "name": "clear",
        "signature": "() => Promise<{ value: boolean; }>",
        "parameters": [],
        "returns": "Promise<{ value: boolean; }>",
        "tags": [
          {
            "name": "returns",
            "text": "true if all values were removed successfully"
          }
        ],
        "docs": "clears all values",
        "complexTypes": [],
        "slug": "clear"
      },
      {
        "name": "keys",
        "signature": "() => Promise<{ value: string[]; }>",
        "parameters": [],
        "returns": "Promise<{ value: string[]; }>",
        "tags": [
          {
            "name": "returns",
            "text": "all keys"
          }
        ],
        "docs": "gets all keys",
        "complexTypes": [],
        "slug": "keys"
      },
      {
        "name": "getPlatform",
        "signature": "() => Promise<{ value: string; }>",
        "parameters": [],
        "returns": "Promise<{ value: string; }>",
        "tags": [
          {
            "name": "returns",
            "text": "the platform"
          }
        ],
        "docs": "gets the platform",
        "complexTypes": [],
        "slug": "getplatform"
      }
    ],
    "properties": []
  },
  "interfaces": [
    {
      "name": "SetDataOptions",
      "slug": "setdataoptions",
      "docs": "allows to define how properties can be accessed on iOS",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "key",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "value",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "accessibility",
          "tags": [],
          "docs": "",
          "complexTypes": [
            "Accessibility"
          ],
          "type": "Accessibility"
        }
      ]
    }
  ],
  "enums": [],
  "typeAliases": [
    {
      "name": "Accessibility",
      "slug": "accessibility",
      "docs": "allows to define how properties can be accessed on iOS",
      "types": [
        {
          "text": "'afterFirstUnlock'",
          "complexTypes": []
        },
        {
          "text": "'afterFirstUnlockThisDeviceOnly'",
          "complexTypes": []
        },
        {
          "text": "'whenUnlocked'",
          "complexTypes": []
        },
        {
          "text": "'whenUnlockedThisDeviceOnly'",
          "complexTypes": []
        },
        {
          "text": "'always'",
          "complexTypes": []
        },
        {
          "text": "'alwaysThisDeviceOnly'",
          "complexTypes": []
        },
        {
          "text": "'whenPasscodeSetThisDeviceOnly'",
          "complexTypes": []
        }
      ]
    }
  ],
  "pluginConfigs": []
}